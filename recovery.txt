
# RAID5 data recovery tool

Command line utility to recover RAID5 data from disk images, even
when the RAID superblock has been deleted and thus it is not possible
to identify which disk image belongs to which RAID array, and in whcih order.

Implements the following actions, in approximate logical order of recovery:

- page size detection
- disk image identification
- parity check
- disk image ordering in array
- data reconstruction

## Syntax

python recovery.py [common options] [action] [action options]


## Common options

- --nproc=N:  use N processors with Python multiprocessing, where applicable. Default 1 processor.
- --image-file=file.img: work on image file "file.img"
- --image-file-pattern="file?.img": work on the list of image files matching the bash pattern
- --page-range=0,2-10-200,30: comma-separated list of page ranges to examine (python ranges, excludes the last element). Default is to examine the whole file.
- -v, --verbose: verbose output

## Commands

- pagesize: page size detection
- raidset: disk image identification
- paritycheck: parity check
- order: disk image ordering in array
- restore: RAID5 reconstruction


### Page size detection

RAID page sizes usually range from 64KB to 1024MB, depending on how the array was defined.
This detection algorithm uses a heuristic based on ASCII files statistics: an ASCII file
will typically use only ~70 separate characters, while the parity calculation will fill
almost the whole 7-bit space. Therefore there will be an alternating pattern of N pages
with a reduced character count, and 1 page with an increased one.
In order for this algorithm to work, a very long ASCII file needs to be present on disk,
ideally a few MB at least. In addition to English text, Many other kind of text files
can work: csv, logs, html. Only a single disk image needs to be examined.

This algorithm can be quite slow so it supports the --nproc=N option for parallel
processing. In addition it is possible to truncate the image file to a few GB since
there is no need for the whole array to be examined, just a portion containing
the right kind of file.

Since this algorithm uses an heuristic, results are not guaranteed. In the worst case,
image files can be examined with an hex editor to look for patterns.

If the page size is known, this step can be skipped.


### Disk image identification

If available image files used to belong to multiple RAID5 arrays, it is necessary
to identify which images belonged to a specific array. This algorithm tries all
possible image files combinations until it finds a group of files matching the RAID5
parity calculation. All matches will be reported, thus it is possible that multiple
RAID arrays will be identified

The output will be a list of image files belonging to a single RAID5 array.
The exact order will still be unknown, since the parity algorithm is symmetric and
cannot be used to identify which image files contains the data and which one
is the additional parity data.

It is possible to run this algorithm on a small subset of the data,
for example just a few GBs, using the --page-range option. As long as the selected
subset contains actual data and not just zeroes, identification should be reliable.
If results are ambiguous, just increase the page range and try again.

If it is known which image files belonged to a certain RAID5 array, this step
can be skipped.


### Parity check

As a data integrity check, a simple parity check can be run on the whole length
of image files belonging to a single RAID5 array. The output is a simple pass/fail result.


### RAID5 sequence detection

Once the image files belonging to a single RAID5 array have been identified,
it is necessary to detect the correct order for array reconstruction.
A heuristic algorithm similar to the one used for page size detection will
detect which one of the image files is the parity one (for each RAID5 page),
and will output the correct image file ordering. The heuristic uses the
same ASCII file patterns described in the page size detection step.

Since this algorithm uses an heuristic, results are not guaranteed. In the worst case,
image files can be examined with an hex editor to look for patterns.


### RAID5 data recontruction

Once both page size and image file order is known, all data can be restored.
This step will read the image files, extract data from the RAID pages in the
correct sequence, and produce a single output file with the virtual drive content.

The resulting file can be examined with fdisk and then mounted as a loopback device
as if it was an image file of a single disk.

