
# RAID5 virtual disk

nbd_raid5.py is Python [nbdkit](https://www.libguestfs.org/nbdkit.1.html) plugin to export a file system starting from disk images once part of a RAID5 array. The RAID superblock does not need to be present. The disk image ordering and RAID page size must be known, in case they can be found with the RAID5 recovery tools described above.

Each disk can be split into multiple image files, i.e. to keep the file size manageable or because the imaging tool can be unreliable when multiple TBs are involved. A geometry file describes how image files are arranged:


```
$ cat geometry.txt 

# id  RAID_idx   file         startMB   endMB
0        0       disk4a.img   0         4813759
1        0       disk4b.img   4813759   7630885.3359375
2        1       disk8a.img   0         7630885.3359375
3        2       disk1a.img   0         2549811
4        2       disk1b.img   2549811   7630885.3359375
5        3       disk7a.img   0         1651088
6        3       disk7b.img   1651088   7630885.3359375
```

Columns are:
- id: unique ID for each file. Any format.
- RAID_idx: RAID disk index of this image file
- file:  filename of this image file
- startMB:  image file starting point in MB
- endMB: image file end point in MB

All empty lines and  lines starting with `#` are ignored.

startMB and endMB can be fractional, but should be a multiple of the RAID page size, typically 64K or 256K.
In this example, "disk4a.img" is an image file of the first RAID disk, contaning the first 4813759 MB of the disk. The rest of the data from the first RAID disk is in file "disk4b.img". The assignment of "disk4" to the first RAID set was done with the RAID5 recovery tools (link) and manually confirmed with an hex editor.


## Install nbd-server and nbd-client

Hopefully you have them in your distribution archives:

`sudo apt install nbd-server nbd-client`

## Install nbdkit

In my case nbdkit was not available on the apt archives.

Clone nbdkit from `https://gitlab.com/nbdkit/nbdkit.git`

1. Python plugin uses Python3. On older systems, make sure that the default Python is verson 3. In case, you can try to set the PYTHON environment variable to the python executable, e.g. "export PYTHON=/usr/bin/python3"

2. Make sure that you have the Python development packages installed

3. Build and install nbdkit:

```
autoreconf -i
./configure
make
sudo make install
```

You might have to play with ./configure settings, for example to disable curl or zstd if some development libraries are missing from your system.


## Start the server

The first server parameter must be `script=<python script path>`. The -v and -f flags force the server
to remain in foreground and print debug information. Other parameters are passed to the Python script.

```
nbdkit -f -v python script=./nbd_raid5.py geometryfile=geometry.txt pagesizeKB=256
```

## Start the client (as root):

```
nbd-client localhost /dev/nbd0
```

## Verify that fdisk works:

```
fdisk -l /dev/nbd0
```

Should show a partition table.

## Mount partitions

Inspect with an hex editor looking for the EXT4 magic number: 0x53EF (already written in little endian). This magic number is at address 0x438 after the partition start. In my case I found it at 0x100438 therefore the partition was starting at 0x100000 (one megabyte)
Mount the partition using the found position as the offset:

```
mount -o offset=1048576,ro /dev/nbd0 /mnt
```

You should now find the files in /mnt

